Casino Royale
Michael Ruvinshteyn
Andrew Qu
Leo Liu
pd 1
---------------------
Casino Royale

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We finally managed to organize who would create which files.
We successfully controlled user input when asked for bets (the user can no longer input non-numerical values).

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We haven't completely fleshed out the components of each class, as we did not expect such difficulty with the relatively small amount of concepts we planned to implement with the UML diagram.
Multiplayer games (such as hearts) were not added as there was no time.
"NaN value returned" still exists when the user inputs a String when asked for a number.
The counting cards function in Blackjack.java is rather useless since a new deck is used whenever a game is started, there are no other players, and the user can see the cards in their hand. Thus, it was commented out.

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We learned how much more complex a few simple casino games would be to code. Each game is so different from the others,
which makes coding a template for all games next to impossible.
The Double class exists with the same respective methods as the Integer class (parseDouble() being the most important).
isNaN from the Double class can check if a numerical variable (int, double, etc) gets a String input.

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We added a Player class, which will keep track of money, winning and losing streaks, and bets, in order to prevent clutter
in the Game class.
We removed multiplayer games due to the additional time needed to invest in implementing one and instead focused our attention
to making single-player games functional.
We removed the concept of superclasses, as the games all worked too differently to implement one single class to create a template
for all of them.

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We learned that sometimes, making more classes can be much more useful than having all major methods in one class. This would
prevent a lot of clutter that we may have if we tried to shove all methods into a single superclass.



 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================


2017 - 01 - 11
--------------------------------------------------------------
Michael :: Created the Player class, updated Slots.java (still incomplete)
Leo :: Created Roulette.java (still incomplete)
Andrew :: Created Blackjack.java (still incomplete)
==============================================================

2017 - 01 - 12
--------------------------------------------------------------
Michael :: Updated Player.java, removed functionality of Game.java (until further notice), Updated Woo.java to accept player information, added Typetester (not used in the future)
Leo :: Updated Woo.java to run the three games
Andrew :: Completed Blackjack
==============================================================

2017 - 01 - 16
--------------------------------------------------------------
Andrew :: Added constructor to Blackjack() that will take the player's balance as input. Fixed bugs in drawCard() and Play(). Play() now returns a boolean, changes to player's balance are made in Woo.java rather than Blackjack.java.
==============================================================

2017 - 01 - 17
--------------------------------------------------------------
Michael :: Established base for README, added bet inputs for Roulette
Andrew :: Bugfix for Blackjack.java in which game wouldn't end if the player's hand exceeded 21
Leo :: Added additional functionality in Woo.java, option to play again, leave the table and switch games, and patched a previous oversight that made Blackjack run every time.
==============================================================

2017 - 01 - 18
--------------------------------------------------------------
Michael :: Made minor text changes in Woo, such that it looks more appealing
Leo :: Made Woo more userproof and rejects invalid inputs, and adjusted payout. Win and loss are now being tracked in Roulette.
==============================================================

2017 - 01 - 19
--------------------------------------------------------------
Andrew :: Coding on Blackjack.java's card counting function started.
==============================================================

2017 - 01 - 20
--------------------------------------------------------------
Michael :: Prevented the user from inputting letter values when asked for numerical ones (such as when inputting bets)
Andrew :: Improved terminal output in Blackjack.java for communication with user. Card counting is functional but risk of being caught and thrown out of casino has yet to be coded.
<<<<<<< HEAD

2017 - 01 - 22
Michael :: Added comments to Woo, added uml.pdf, added flow.pdf, updated README to include Roulette and Slots
Andrew :: Code blocks for checking if a bet makes sense replaced with a helper function. Player.win() and .lose() print new balance. Blackjack checks for valid bets. In Blackjack.java, user now has option to make aces high or low, and the whole hand is printed out in text instead of just printing their total value.

